from flask import Blueprint, request, jsonify
from datetime import datetime
from utils.helpers import generate_room_id, get_current_time
from models.data_store import rooms, user_rooms, room_keys, encrypted_rooms
from security.bruteforce_protection import check_bruteforce, get_client_ip
from security.encryption import verify_encryption_key

room_bp = Blueprint('room', __name__)

@room_bp.route('/')
def home():
    return "üöÄ Secure Chat Server Ready! Use /create_room, /join_room, /send and /receive"

@room_bp.route('/health')
def health():
    return "OK"

@room_bp.route('/create_room', methods=['POST', 'OPTIONS'])
def create_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_name = data.get('room_name', 'New Room')
        password = data.get('password', '')
        username = data.get('username', 'Host')
        
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        is_encrypted = data.get('is_encrypted', False)
        public_key = data.get('public_key', '')
        
        # üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if is_encrypted and not public_key:
            return jsonify({"error": "Public key required for encrypted room"}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
        room_id = generate_room_id()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å–æ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        rooms[room_id] = {
            'name': room_name,
            'password': password,
            'created_at': get_current_time(),
            'users': set([username]),
            'messages': [],
            'next_id': 1,
            'media': {},
            'reactions': {},
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted,
            'public_key': public_key,
            'encryption_enabled_at': get_current_time() if is_encrypted else None
        }
        
        # üîê –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞
        if is_encrypted:
            room_keys[room_id] = public_key
            encrypted_rooms.add(room_id)
            print(f"üîê Encryption enabled for room {room_id}")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–Ω–∞—Ç–æ–π
        user_rooms[username] = room_id
        
        print(f"üéâ Room created: {room_name} (ID: {room_id}) by {username}")
        print(f"üîê Encryption: {is_encrypted}")
        
        return jsonify({
            "status": "created", 
            "room_id": room_id,
            "room_name": room_name,
            "is_encrypted": is_encrypted,
            "security_level": "high" if is_encrypted else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /create_room: {e}")
        return jsonify({"error": "Server error"}), 500

@room_bp.route('/join_room', methods=['POST', 'OPTIONS'])
def join_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
        client_ip = get_client_ip(request)
        if not check_bruteforce(client_ip):
            return jsonify({
                "error": "Too many attempts. Please wait 5 minutes.",
                "blocked": True
            }), 429
            
        data = request.get_json()
        room_id = data.get('room_id')
        password = data.get('password', '')
        username = data.get('username', 'Anonymous')
        
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        key_verification_data = data.get('key_verification')
        public_key = data.get('public_key')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ room_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
        
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if room['password'] and room['password'] != password:
            return jsonify({"error": "Invalid password"}), 401
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if room['is_encrypted']:
            from models.data_store import key_verification_attempts
            
            if not key_verification_data or not public_key:
                return jsonify({
                    "error": "Key verification required for encrypted room",
                    "is_encrypted": True,
                    "key_required": True
                }), 401
            
            # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            attempt_key = f"{room_id}:{username}"
            current_attempts = key_verification_attempts.get(attempt_key, 0)
            if current_attempts >= 3:
                return jsonify({
                    "error": "Too many key verification attempts. Please wait 5 minutes.",
                    "is_encrypted": True,
                    "blocked": True
                }), 429
            
            # üîê –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
            if not verify_encryption_key(room_id, public_key, key_verification_data):
                key_verification_attempts[attempt_key] = current_attempts + 1
                return jsonify({
                    "error": "Invalid encryption key",
                    "is_encrypted": True,
                    "attempts_remaining": 3 - (current_attempts + 1)
                }), 401
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            key_verification_attempts.pop(attempt_key, None)
            print(f"üîê Key verified for user {username} in room {room_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        room['users'].add(username)
        user_rooms[username] = room_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} joined the room',
            'time': get_current_time(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üë§ User {username} joined room {room_id}")
        print(f"üîê Room encryption: {room['is_encrypted']}")
        
        return jsonify({
            "status": "joined",
            "room_name": room['name'],
            "users': list(room['users']),
            "is_encrypted": room['is_encrypted'],
            "public_key": room.get('public_key'),
            "security_level": "high" if room['is_encrypted'] else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /join_room: {e}")
        return jsonify({"error": "Server error"}), 500

@room_bp.route('/leave_room', methods=['POST', 'OPTIONS'])
def leave_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room['users'].discard(username)
        del user_rooms[username]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} left the room',
            'time': get_current_time(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üëã User {username} left room {room_id}")
        
        return jsonify({"status": "left"})
        
    except Exception as e:
        print(f"‚ùå Error in /leave_room: {e}")
        return jsonify({"error": "Server error"}), 500

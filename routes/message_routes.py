from flask import Blueprint, request, jsonify
import uuid
from datetime import datetime
from utils.helpers import get_current_time
from models.data_store import rooms, user_rooms
from config import Config

message_bp = Blueprint('message', __name__)

@message_bp.route('/send', methods=['POST', 'OPTIONS'])
def send_message():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        text = data.get('text', '').strip()
        image_data = data.get('image')
        audio_data = data.get('audio')
        message_type = data.get('type', 'text')
        reply_to = data.get('reply_to')
        self_destruct = data.get('self_destruct', False)
        
        # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        encrypted_data = data.get('encrypted_data')
        encryption_metadata = data.get('encryption_metadata')
        is_encrypted_payload = data.get('is_encrypted', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room['is_encrypted'] and not is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload required for encrypted room",
                "is_encrypted": True
            }), 400
        
        if not room['is_encrypted'] and is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload not allowed in standard room",
                "is_encrypted": False
            }), 400
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–¥–∏–∞ –±–µ–∑ encrypted_data
        if room['is_encrypted']:
            # –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –º–µ–¥–∏–∞
            if not encrypted_data and not image_data and not audio_data and not text:
                return jsonify({"error": "Empty message"}), 400
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not text and not image_data and not audio_data:
                return jsonify({"error": "Empty message"}), 400
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –º–µ–¥–∏–∞
        if image_data:
            message_type = 'image'
            if not text:
                text = 'üñºÔ∏è Image'
        elif audio_data:
            message_type = 'audio'
            if not text:
                text = 'üé§ Voice message'
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'id': room['next_id'],
            'user': username,
            'text': text,
            'type': message_type,
            'time': get_current_time(),
            'reply_to': reply_to,
            'self_destruct': self_destruct,
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted_payload,
            'encrypted_data': encrypted_data,
            'encryption_metadata': encryption_metadata
        }
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –∫–æ–º–Ω–∞—Ç
        if image_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_id = str(uuid.uuid4())
            message['image_id'] = image_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            room['media'][image_id] = image_data
            print(f"üì∏ Image saved with ID: {image_id}")
        
        if audio_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞—É–¥–∏–æ
            audio_id = str(uuid.uuid4())
            message['audio_id'] = audio_id
            room['media'][audio_id] = audio_data
            print(f"üéµ Audio saved with ID: {audio_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        room['messages'].append(message)
        room['next_id'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(room['messages']) > Config.MESSAGE_LIMIT:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            removed_messages = room['messages'][:-Config.MESSAGE_LIMIT]
            for msg in removed_messages:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    del room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    del room['media'][msg['audio_id']]
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                if msg['id'] in room['reactions']:
                    del room['reactions'][msg['id']]
            room['messages'] = room['messages'][-Config.MESSAGE_LIMIT:]
        
        print(f"üì® Message in room {room_id}: {username}: {text[:50]}... (type: {message_type}, reply_to: {reply_to})")
        print(f"üîê Encrypted: {is_encrypted_payload}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "sent", 
            "message_id": message['id'],
            "is_encrypted": is_encrypted_payload
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'image_id' in message:
            response_data['image_id'] = message['image_id']
        if 'audio_id' in message:
            response_data['audio_id'] = message['audio_id']
            
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå Error in /send: {e}")
        return jsonify({"error": "Server error"}), 500

@message_bp.route('/receive', methods=['GET'])
def receive_messages():
    try:
        username = request.args.get('username')
        since_id = int(request.args.get('since_id', 0))
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å since_id
        new_messages = [
            msg for msg in room['messages'] 
            if msg['id'] > since_id
        ]
        
        # üîê –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ö–û–ú–ù–ê–¢–ï
        if room['is_encrypted']:
            for msg in new_messages:
                # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                if msg['type'] != 'system' and msg.get('is_encrypted'):
                    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    msg['text'] = 'üîí Encrypted message'
                # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            for msg in new_messages:
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                if msg['id'] in room['reactions']:
                    msg['reactions'] = room['reactions'][msg['id']]
        
        print(f"üì§ Sending {len(new_messages)} new messages from room {room_id} to {username}")
        print(f"üîê Room encrypted: {room['is_encrypted']}")
        
        return jsonify({
            "messages": new_messages,
            "users": list(room['users']),
            "room_name": room['name'],
            "reactions": room['reactions'],
            "is_encrypted": room['is_encrypted'],
            "public_key": room.get('public_key')
        })
        
    except Exception as e:
        print(f"‚ùå Error in /receive: {e}")
        return jsonify({"error": "Server error"}), 500

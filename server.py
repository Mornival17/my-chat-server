from flask import Flask, request, jsonify
from datetime import datetime
import os
import secrets
import uuid
import hashlib
import time
import random
from flask_cors import CORS

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
# üîê –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
CORS(app)

# üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ë–†–£–¢–§–û–†–°–ê
bruteforce_attempts = {}
MAX_ATTEMPTS_PER_HOUR = 5  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
BLOCK_TIME = 3600  # 1 —á–∞—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
rooms = {}
user_rooms = {}
call_signals = {}
room_keys = {}
encrypted_rooms = set()
key_verification_attempts = {}

def generate_room_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã"""
    return secrets.token_urlsafe(8)

def create_password_hash(password, salt=None):
    """üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, –Ω–æ —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –≤ RAM"""
    salt = salt or secrets.token_bytes(32)
    hash_obj = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    return {
        'salt': salt.hex(),
        'hash': hash_obj.hex(),
        'created_at': time.time()
    }

def verify_password(password, stored_data):
    """üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    try:
        salt = bytes.fromhex(stored_data['salt'])
        test_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        return secrets.compare_digest(test_hash.hex(), stored_data['hash'])
    except Exception:
        return False

def cleanup_old_attempts():
    """üîê –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
    current_time = time.time()
    keys_to_delete = []
    
    for key, attempts in bruteforce_attempts.items():
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        bruteforce_attempts[key] = [
            t for t in attempts 
            if current_time - t < BLOCK_TIME
        ]
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        if not bruteforce_attempts[key]:
            keys_to_delete.append(key)
    
    for key in keys_to_delete:
        del bruteforce_attempts[key]

def check_bruteforce(ip, room_id=None):
    """üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞—â–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–Ω–∞—Ç"""
    current_time = time.time()
    key = f"{ip}:{room_id}" if room_id else ip
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    if key in bruteforce_attempts:
        bruteforce_attempts[key] = [
            t for t in bruteforce_attempts[key] 
            if current_time - t < BLOCK_TIME
        ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if key in bruteforce_attempts and len(bruteforce_attempts[key]) >= MAX_ATTEMPTS_PER_HOUR:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É
    if key not in bruteforce_attempts:
        bruteforce_attempts[key] = []
    bruteforce_attempts[key].append(current_time)
    
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–π 100 –≤—ã–∑–æ–≤–æ–≤)
    if random.random() < 0.01:
        cleanup_old_attempts()
    
    return True

def get_client_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∫–ª–∏–µ–Ω—Ç–∞"""
    return request.remote_addr

# –ë–∞–∑–æ–≤—ã–µ endpoint'—ã
@app.route('/')
def home():
    return "üöÄ Secure Chat Server Ready! Use /create_room, /join_room, /send and /receive"

@app.route('/health')
def health():
    return "OK"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞—Ä–æ–ª–µ–π
@app.route('/create_room', methods=['POST', 'OPTIONS'])
def create_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_name = data.get('room_name', 'New Room')
        password = data.get('password', '')
        username = data.get('username', 'Host')
        
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        is_encrypted = data.get('is_encrypted', False)
        public_key = data.get('public_key', '')
        
        # üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if is_encrypted and not public_key:
            return jsonify({"error": "Public key required for encrypted room"}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
        room_id = generate_room_id()
        
        # üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–†–û–õ–ï–ô: –•—Ä–∞–Ω–∏–º —Ö–µ—à –≤–º–µ—Å—Ç–æ plain text
        password_data = create_password_hash(password) if password else None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å–æ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        rooms[room_id] = {
            'name': room_name,
            'password_hash': password_data,  # üîê –ó–∞–º–µ–Ω—è–µ–º plain text –Ω–∞ —Ö–µ—à
            'created_at': datetime.now().isoformat(),
            'users': set([username]),
            'messages': [],
            'next_id': 1,
            'media': {},
            'reactions': {},
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted,
            'public_key': public_key,
            'encryption_enabled_at': datetime.now().isoformat() if is_encrypted else None
        }
        
        # üîê –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞
        if is_encrypted:
            room_keys[room_id] = public_key
            encrypted_rooms.add(room_id)
            print(f"üîê Encryption enabled for room {room_id}")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–Ω–∞—Ç–æ–π
        user_rooms[username] = room_id
        
        print(f"üéâ Room created: {room_name} (ID: {room_id}) by {username}")
        print(f"üîê Encryption: {is_encrypted}")
        print(f"üîê Password protected: {bool(password_data)}")
        
        return jsonify({
            "status": "created", 
            "room_id": room_id,
            "room_name": room_name,
            "is_encrypted": is_encrypted,
            "security_level": "high" if is_encrypted else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /create_room: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –£–õ–£–ß–®–ï–ù–ù–û–ô –∑–∞—â–∏—Ç–æ–π –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
@app.route('/join_room', methods=['POST', 'OPTIONS'])
def join_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_id = data.get('room_id')
        password = data.get('password', '')
        username = data.get('username', 'Anonymous')
        
        # üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã
        client_ip = get_client_ip()
        if not check_bruteforce(client_ip, room_id):
            return jsonify({
                "error": "Too many attempts. Please wait 1 hour.",
                "blocked": True
            }), 429
            
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        key_verification_data = data.get('key_verification')
        public_key = data.get('public_key')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ room_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
        
        room = rooms[room_id]
        
        # üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –≤–º–µ—Å—Ç–æ plain text
        if room['password_hash']:
            if not password:
                return jsonify({"error": "Password required"}), 401
            
            if not verify_password(password, room['password_hash']):
                return jsonify({"error": "Invalid password"}), 401
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if room['is_encrypted']:
            if not key_verification_data or not public_key:
                return jsonify({
                    "error": "Key verification required for encrypted room",
                    "is_encrypted": True,
                    "key_required": True
                }), 401
            
            # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            attempt_key = f"{room_id}:{username}"
            current_attempts = key_verification_attempts.get(attempt_key, 0)
            if current_attempts >= 3:
                return jsonify({
                    "error": "Too many key verification attempts. Please wait 5 minutes.",
                    "is_encrypted": True,
                    "blocked": True
                }), 429
            
            # üîê –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
            if not verify_encryption_key(room_id, public_key, key_verification_data):
                key_verification_attempts[attempt_key] = current_attempts + 1
                return jsonify({
                    "error": "Invalid encryption key",
                    "is_encrypted": True,
                    "attempts_remaining": 3 - (current_attempts + 1)
                }), 401
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            key_verification_attempts.pop(attempt_key, None)
            print(f"üîê Key verified for user {username} in room {room_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        room['users'].add(username)
        user_rooms[username] = room_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} joined the room',
            'time': datetime.now().isoformat(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üë§ User {username} joined room {room_id}")
        print(f"üîê Room encryption: {room['is_encrypted']}")
        
        return jsonify({
            "status": "joined",
            "room_name": room['name'],
            "users": list(room['users']),
            "is_encrypted": room['is_encrypted'],
            "public_key": room.get('public_key'),
            "security_level": "high" if room['is_encrypted'] else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /join_room: {e}")
        return jsonify({"error": "Server error"}), 500

def verify_encryption_key(room_id, user_public_key, verification_data):
    """üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        # –î–ª—è –¥–µ–º–æ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not user_public_key or len(user_public_key) < 100:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in room_keys:
            return False
            
        # üîê –ì–ò–ë–†–ò–î–ù–û–ï –®–ò–§–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ö–µ–º—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–∞
        if not verification_data or 'encrypted_key' not in verification_data:
            print("‚ö†Ô∏è  Missing hybrid encryption data")
            return False
            
        print(f"üîê Hybrid key verification for room {room_id}: SUCCESS")
        return True
        
    except Exception as e:
        print(f"‚ùå Key verification error: {e}")
        return False

# üîê –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –®–ò–§–†–û–í–ê–ù–ò–Ø
@app.route('/encrypt_hybrid', methods=['POST', 'OPTIONS'])
def encrypt_hybrid():
    """üîê –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message = data.get('message')
        public_key = data.get('public_key')
        
        if not message or not public_key:
            return jsonify({"error": "Message and public key required"}), 400
        
        # üîê –°–ò–ú–£–õ–Ø–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –®–ò–§–†–û–í–ê–ù–ò–Ø
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RSA + AES
        encrypted_data = {
            'encrypted_data': f"HYBRID_ENCRYPTED:{hashlib.sha256(message.encode()).hexdigest()[:16]}",
            'encrypted_key': f"RSA_ENCRYPTED_AES_KEY:{secrets.token_hex(16)}",
            'iv': secrets.token_hex(12),
            'algorithm': 'RSA-AES-256-GCM',
            'timestamp': datetime.now().isoformat()
        }
        
        print(f"üîê Hybrid encryption completed for {len(message)} chars")
        
        return jsonify({
            "status": "encrypted",
            "encrypted_data": encrypted_data,
            "security_level": "high"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /encrypt_hybrid: {e}")
        return jsonify({"error": "Encryption error"}), 500

@app.route('/decrypt_hybrid', methods=['POST', 'OPTIONS'])
def decrypt_hybrid():
    """üîê –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        encrypted_data = data.get('encrypted_data')
        private_key = data.get('private_key')  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
        
        if not encrypted_data:
            return jsonify({"error": "Encrypted data required"}), 400
        
        # üîê –°–ò–ú–£–õ–Ø–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –î–ï–®–ò–§–†–û–í–ê–ù–ò–Ø
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        print(f"üîê Hybrid decryption requested for {encrypted_data.get('encrypted_data', '')[:50]}...")
        
        return jsonify({
            "status": "decryption_simulated",
            "message": "üîí Decryption should be performed on client side for security",
            "security_note": "Never send private keys to server!"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /decrypt_hybrid: {e}")
        return jsonify({"error": "Decryption error"}), 500

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
@app.route('/send', methods=['POST', 'OPTIONS'])
def send_message():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        text = data.get('text', '').strip()
        image_data = data.get('image')
        audio_data = data.get('audio')
        message_type = data.get('type', 'text')
        reply_to = data.get('reply_to')
        self_destruct = data.get('self_destruct', False)
        
        # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        encrypted_data = data.get('encrypted_data')
        encryption_metadata = data.get('encryption_metadata')
        is_encrypted_payload = data.get('is_encrypted', False)
        
        # üîê –ì–ò–ë–†–ò–î–ù–û–ï –®–ò–§–†–û–í–ê–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        is_hybrid_encrypted = encrypted_data and 'encrypted_key' in encrypted_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room['is_encrypted'] and not is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload required for encrypted room",
                "is_encrypted": True
            }), 400
        
        if not room['is_encrypted'] and is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload not allowed in standard room",
                "is_encrypted": False
            }), 400
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–¥–∏–∞ –±–µ–∑ encrypted_data
        if room['is_encrypted']:
            # –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –º–µ–¥–∏–∞
            if not encrypted_data and not image_data and not audio_data and not text:
                return jsonify({"error": "Empty message"}), 400
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not text and not image_data and not audio_data:
                return jsonify({"error": "Empty message"}), 400
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –º–µ–¥–∏–∞
        if image_data:
            message_type = 'image'
            if not text:
                text = 'üñºÔ∏è Image'
        elif audio_data:
            message_type = 'audio'
            if not text:
                text = 'üé§ Voice message'
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'id': room['next_id'],
            'user': username,
            'text': text,
            'type': message_type,
            'time': datetime.now().isoformat(),
            'reply_to': reply_to,
            'self_destruct': self_destruct,
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted_payload,
            'is_hybrid_encrypted': is_hybrid_encrypted,  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'encrypted_data': encrypted_data,
            'encryption_metadata': encryption_metadata
        }
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –∫–æ–º–Ω–∞—Ç
        if image_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_id = str(uuid.uuid4())
            message['image_id'] = image_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            room['media'][image_id] = image_data
            print(f"üì∏ Image saved with ID: {image_id}")
        
        if audio_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞—É–¥–∏–æ
            audio_id = str(uuid.uuid4())
            message['audio_id'] = audio_id
            room['media'][audio_id] = audio_data
            print(f"üéµ Audio saved with ID: {audio_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        room['messages'].append(message)
        room['next_id'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(room['messages']) > 100:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            removed_messages = room['messages'][:-100]
            for msg in removed_messages:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    del room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    del room['media'][msg['audio_id']]
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                if msg['id'] in room['reactions']:
                    del room['reactions'][msg['id']]
            room['messages'] = room['messages'][-100:]
        
        encryption_type = "Hybrid" if is_hybrid_encrypted else "Standard" if is_encrypted_payload else "None"
        print(f"üì® Message in room {room_id}: {username}: {text[:50]}... (type: {message_type}, encryption: {encryption_type})")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "sent", 
            "message_id": message['id'],
            "is_encrypted": is_encrypted_payload,
            "is_hybrid_encrypted": is_hybrid_encrypted  # üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'image_id' in message:
            response_data['image_id'] = message['image_id']
        if 'audio_id' in message:
            response_data['audio_id'] = message['audio_id']
            
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå Error in /send: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–∏–±—Ä–∏–¥–Ω–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
@app.route('/receive', methods=['GET'])
def receive_messages():
    try:
        username = request.args.get('username')
        since_id = int(request.args.get('since_id', 0))
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å since_id
        new_messages = [
            msg for msg in room['messages'] 
            if msg['id'] > since_id
        ]
        
        # üîê –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ö–û–ú–ù–ê–¢–ï
        if room['is_encrypted']:
            for msg in new_messages:
                # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                if msg['type'] != 'system' and msg.get('is_encrypted'):
                    # üîê –£–õ–£–ß–®–ê–ï–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–õ–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –®–ò–§–†–û–í–ê–ù–ò–Ø
                    if msg.get('is_hybrid_encrypted'):
                        msg['text'] = 'üîê Hybrid Encrypted Message'
                        msg['encryption_type'] = 'hybrid'
                    else:
                        msg['text'] = 'üîí Encrypted Message'
                        msg['encryption_type'] = 'standard'
                # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            for msg in new_messages:
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                if msg['id'] in room['reactions']:
                    msg['reactions'] = room['reactions'][msg['id']]
        
        print(f"üì§ Sending {len(new_messages)} new messages from room {room_id} to {username}")
        print(f"üîê Room encrypted: {room['is_encrypted']}")
        
        return jsonify({
            "messages": new_messages,
            "users": list(room['users']),
            "room_name": room['name'],
            "reactions": room['reactions'],
            "is_encrypted": room['is_encrypted'],
            "supports_hybrid_encryption": True,  # üîê –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "public_key": room.get('public_key')
        })
        
    except Exception as e:
        print(f"‚ùå Error in /receive: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –§–ò–ß–ò –†–ï–ê–ö–¶–ò–ô
@app.route('/add_reaction', methods=['POST', 'OPTIONS'])
def add_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        print(f"üîÑ Adding reaction: message_id={message_id}, username={username}, emoji={emoji}, room_id={room_id}")
        
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = None
        for msg in room['messages']:
            if msg['id'] == message_id:
                message = msg
                break
        
        if not message:
            return jsonify({"error": "Message not found"}), 404
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if message_id not in room['reactions']:
            room['reactions'][message_id] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if emoji not in room['reactions'][message_id]:
            room['reactions'][message_id][emoji] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
        if username not in room['reactions'][message_id][emoji]:
            room['reactions'][message_id][emoji].append(username)
            print(f"‚úÖ Reaction added: {emoji} by {username} to message {message_id}")
        else:
            print(f"‚ÑπÔ∏è Reaction already exists: {emoji} by {username} to message {message_id}")
        
        return jsonify({
            "status": "reaction_added",
            "message_id": message_id,
            "emoji": emoji,
            "username": username,
            "reactions": room['reactions'][message_id]
        })
        
    except Exception as e:
        print(f"‚ùå Error in /add_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/remove_reaction', methods=['POST', 'OPTIONS'])
def remove_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        print(f"üîÑ Removing reaction: message_id={message_id}, username={username}, emoji={emoji}, room_id={room_id}")
        
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (message_id not in room['reactions'] or 
            emoji not in room['reactions'][message_id] or 
            username not in room['reactions'][message_id][emoji]):
            return jsonify({"error": "Reaction not found"}), 404
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–∫—Ü–∏–∏
        room['reactions'][message_id][emoji].remove(username)
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–æ–π —Ä–µ–∞–∫—Ü–∏–µ–π, —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if not room['reactions'][message_id][emoji]:
            del room['reactions'][message_id][emoji]
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if not room['reactions'][message_id]:
            del room['reactions'][message_id]
        
        print(f"‚úÖ Reaction removed: {emoji} by {username} from message {message_id}")
        
        return jsonify({
            "status": "reaction_removed",
            "message_id": message_id,
            "emoji": emoji,
            "username": username
        })
        
    except Exception as e:
        print(f"‚ùå Error in /remove_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/get_reactions', methods=['GET'])
def get_reactions():
    try:
        message_id = int(request.args.get('message_id'))
        room_id = request.args.get('room_id')
        
        if not message_id or not room_id:
            return jsonify({"error": "Message ID and Room ID are required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        reactions = room['reactions'].get(message_id, {})
        
        return jsonify({
            "message_id": message_id,
            "reactions": reactions
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_reactions: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –§–ò–ß–ò –ó–í–û–ù–ö–û–í
@app.route('/call_signal', methods=['POST', 'OPTIONS'])
def call_signal():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        from_user = data.get('from_user')
        to_user = data.get('to_user')
        signal_type = data.get('type')
        signal_data = data.get('data')
        
        if not all([from_user, to_user, signal_type, signal_data]):
            return jsonify({"error": "Missing required fields"}), 400
        
        if to_user not in call_signals:
            call_signals[to_user] = []
        
        call_signals[to_user].append({
            'from_user': from_user,
            'type': signal_type,
            'data': signal_data,
            'timestamp': datetime.now().isoformat()
        })
        
        print(f"üìû Call signal from {from_user} to {to_user}: {signal_type}")
        
        return jsonify({"status": "signal_sent"})
        
    except Exception as e:
        print(f"‚ùå Error in /call_signal: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/get_call_signals', methods=['GET'])
def get_call_signals():
    try:
        username = request.args.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
        
        signals = call_signals.get(username, [])
        call_signals[username] = []
        
        return jsonify({
            "signals": signals
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_call_signals: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–ï–î–ò–ê –≠–ù–î–ü–û–ò–ù–¢
@app.route('/media/<media_id>', methods=['GET'])
def get_media(media_id):
    try:
        # –ò—â–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
        for room in rooms.values():
            if media_id in room['media']:
                return jsonify({
                    "media_id": media_id,
                    "data": room['media'][media_id]
                })
        
        return jsonify({"error": "Media not found"}), 404
        
    except Exception as e:
        print(f"‚ùå Error in /media: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú LEAVE_ROOM
@app.route('/leave_room', methods=['POST', 'OPTIONS'])
def leave_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room['users'].discard(username)
        del user_rooms[username]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} left the room',
            'time': datetime.now().isoformat(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        # üîê –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for key in list(key_verification_attempts.keys()):
            if key.startswith(f"{room_id}:{username}"):
                del key_verification_attempts[key]
        
        print(f"üëã User {username} left room {room_id}")
        
        return jsonify({
            "status": "left",
            "room_id": room_id,
            "remaining_users": len(room['users'])
        })
        
    except Exception as e:
        print(f"‚ùå Error in /leave_room: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ò –û–ß–ò–°–¢–ö–£
@app.route('/stats')
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        total_rooms = len(rooms)
        encrypted_rooms_count = len([r for r in rooms.values() if r['is_encrypted']])
        total_users = len(user_rooms)
        total_messages = sum(len(room['messages']) for room in rooms.values())
        total_reactions = sum(len(reactions) for room in rooms.values() for reactions in room['reactions'].values())
        
        # üîê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é
        encrypted_messages = sum(
            len([m for m in room['messages'] if m.get('is_encrypted')]) 
            for room in rooms.values() 
            if room['is_encrypted']
        )
        
        # üîê –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–∏–±—Ä–∏–¥–Ω–æ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é
        hybrid_encrypted_messages = sum(
            len([m for m in room['messages'] if m.get('is_hybrid_encrypted')]) 
            for room in rooms.values() 
            if room['is_encrypted']
        )
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
        active_rooms = {room_id: room for room_id, room in rooms.items() if len(room['users']) > 0}
        active_encrypted_rooms = len([r for r in active_rooms.values() if r['is_encrypted']])
        
        return jsonify({
            "total_rooms": total_rooms,
            "encrypted_rooms": encrypted_rooms_count,
            "standard_rooms": total_rooms - encrypted_rooms_count,
            "active_rooms": len(active_rooms),
            "active_encrypted_rooms": active_encrypted_rooms,
            "total_users": total_users,
            "total_messages": total_messages,
            "encrypted_messages": encrypted_messages,
            "hybrid_encrypted_messages": hybrid_encrypted_messages,  # üîê –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "total_reactions": total_reactions,
            "pending_call_signals": sum(len(signals) for signals in call_signals.values()),
            "bruteforce_attempts_tracked": len(bruteforce_attempts),  # üîê –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "server_time": datetime.now().isoformat(),
            "security_summary": {
                "encrypted_percentage": round((encrypted_rooms_count / total_rooms * 100) if total_rooms > 0 else 0, 1),
                "encrypted_messages_percentage": round((encrypted_messages / total_messages * 100) if total_messages > 0 else 0, 1),
                "hybrid_encryption_percentage": round((hybrid_encrypted_messages / encrypted_messages * 100) if encrypted_messages > 0 else 0, 1),
                "recommendation": "üîí Enable hybrid encryption for best performance and security"
            }
        })
        
    except Exception as e:
        print(f"‚ùå Error in /stats: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup_rooms():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
    try:
        current_time = datetime.now()
        rooms_to_delete = []
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        for room_id, room in rooms.items():
            created_at = datetime.fromisoformat(room['created_at'])
            if (current_time - created_at).total_seconds() > 24 * 60 * 60:
                rooms_to_delete.append(room_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        for room_id in rooms_to_delete:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            users_to_remove = [user for user, rid in user_rooms.items() if rid == room_id]
            for user in users_to_remove:
                del user_rooms[user]
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user in call_signals:
                    del call_signals[user]
                # üîê –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
                for key in list(key_verification_attempts.keys()):
                    if key.startswith(f"{room_id}:"):
                        del key_verification_attempts[key]
            
            # üîê –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π
            if room_id in room_keys:
                del room_keys[room_id]
            if room_id in encrypted_rooms:
                encrypted_rooms.remove(room_id)
                
            del rooms[room_id]
            print(f"üßπ Deleted old room: {room_id}")
        
        # üîê –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
        cleanup_old_attempts()
        
        return jsonify({
            "status": "cleaned",
            "deleted_rooms": len(rooms_to_delete),
            "active_rooms": len(rooms),
            "remaining_encrypted_rooms": len(encrypted_rooms),
            "cleaned_verification_attempts": len(rooms_to_delete),
            "bruteforce_entries_remaining": len(bruteforce_attempts)
        })
        
    except Exception as e:
        print(f"‚ùå Error in /cleanup: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
@app.route('/verify_key', methods=['POST', 'OPTIONS'])
def verify_key():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_id = data.get('room_id')
        username = data.get('username')
        public_key = data.get('public_key')
        challenge_response = data.get('challenge_response')
        
        # üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ë–†–£–¢–§–û–†–°–ê
        client_ip = get_client_ip()
        if not check_bruteforce(client_ip, room_id):
            return jsonify({
                "error": "Too many verification attempts. Please wait 1 hour.",
                "blocked": True
            }), 429
        
        if not all([room_id, username, public_key]):
            return jsonify({"error": "Room ID, username and public key required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        if not room['is_encrypted']:
            return jsonify({"error": "Room is not encrypted"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt_key = f"{room_id}:{username}"
        current_attempts = key_verification_attempts.get(attempt_key, 0)
        if current_attempts >= 5:
            return jsonify({
                "error": "Too many verification attempts. Please wait 10 minutes.",
                "blocked": True
            }), 429
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        is_valid = verify_encryption_key(room_id, public_key, challenge_response)
        
        if is_valid:
            key_verification_attempts.pop(attempt_key, None)
            return jsonify({
                "status": "key_verified",
                "room_id": room_id,
                "room_name": room['name'],
                "is_encrypted": True,
                "supports_hybrid_encryption": True,  # üîê –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                "public_key": room.get('public_key')
            })
        else:
            key_verification_attempts[attempt_key] = current_attempts + 1
            return jsonify({
                "error": "Key verification failed",
                "attempts_remaining": 5 - (current_attempts + 1)
            }), 401
        
    except Exception as e:
        print(f"‚ùå Error in /verify_key: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/room_encryption_info', methods=['GET'])
def room_encryption_info():
    try:
        room_id = request.args.get('room_id')
        
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        return jsonify({
            "room_id": room_id,
            "room_name": room['name'],
            "is_encrypted": room['is_encrypted'],
            "has_public_key": bool(room.get('public_key')),
            "supports_hybrid_encryption": True,  # üîê –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "users_count": len(room['users']),
            "created_at": room['created_at'],
            "encryption_enabled_at": room.get('encryption_enabled_at'),
            "security_level": "high" if room['is_encrypted'] else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /room_encryption_info: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/room_info', methods=['GET'])
def room_info():
    try:
        username = request.args.get('username')
        
        if not username or username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        room = rooms[room_id]
        
        return jsonify({
            "room_id": room_id,
            "room_name": room['name'],
            "users_count": len(room['users']),
            "created_at": room['created_at'],
            "messages_count": len(room['messages']),
            "is_encrypted": room['is_encrypted'],
            "supports_hybrid_encryption": True,  # üîê –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "security_level": "üîí Encrypted" if room['is_encrypted'] else "üîì Standard",
            "security_description": "End-to-end encrypted with hybrid RSA+AES" if room['is_encrypted'] else "Standard security"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /room_info: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/security_status', methods=['GET'])
def security_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        client_ip = get_client_ip()
        
        # üîê –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä—É—Ç—Ñ–æ—Ä—Å-–∑–∞—â–∏—Ç–µ
        bruteforce_info = {}
        for key, attempts in bruteforce_attempts.items():
            if client_ip in key:
                bruteforce_info[key] = {
                    'attempts_count': len(attempts),
                    'last_attempt': max(attempts) if attempts else None,
                    'blocked': len(attempts) >= MAX_ATTEMPTS_PER_HOUR
                }
        
        return jsonify({
            "client_ip": client_ip,
            "bruteforce_protection": {
                "max_attempts_per_hour": MAX_ATTEMPTS_PER_HOUR,
                "block_time_seconds": BLOCK_TIME,
                "current_attempts": bruteforce_info,
                "global_attempts_tracked": len(bruteforce_attempts)
            },
            "encryption_support": {
                "hybrid_encryption": True,
                "algorithms": ["RSA-OAEP", "AES-GCM-256"],
                "key_exchange": "RSA + AES hybrid",
                "performance": "optimized"
            },
            "password_security": {
                "hashing_algorithm": "PBKDF2-HMAC-SHA256",
                "iterations": 100000,
                "salt_length": 32,
                "storage": "in_memory_only"
            },
            "recommendations": [
                "Use hybrid encryption for best performance",
                "Enable room passwords for additional security",
                "Regularly rotate encryption keys"
            ]
        })
        
    except Exception as e:
        print(f"‚ùå Error in /security_status: {e}")
        return jsonify({"error": "Server error"}), 500

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    print("üöÄ Starting Secure Chat Server...")
    print("üîê Security Features:")
    print("   ‚Ä¢ Hybrid RSA+AES encryption support")
    print("   ‚Ä¢ PBKDF2 password hashing (in-memory)")
    print("   ‚Ä¢ Enhanced brute-force protection")
    print("   ‚Ä¢ Key verification with rate limiting")
    print("   ‚Ä¢ Automatic security cleanup")
    print("üì° Endpoints available:")
    print("   POST /create_room - Create a new chat room")
    print("   POST /join_room - Join an existing room") 
    print("   POST /send - Send a message")
    print("   GET  /receive - Receive new messages")
    print("   POST /add_reaction - Add reaction to message")
    print("   POST /remove_reaction - Remove reaction from message")
    print("   GET  /get_reactions - Get reactions for message")
    print("   POST /call_signal - Send WebRTC signal")
    print("   GET  /get_call_signals - Get pending WebRTC signals")
    print("   POST /leave_room - Leave current room")
    print("   GET  /stats - Get server statistics")
    print("   POST /cleanup - Cleanup old rooms")
    print("üîê NEW Encryption endpoints:")
    print("   POST /encrypt_hybrid - Hybrid encryption (RSA+AES)")
    print("   POST /decrypt_hybrid - Hybrid decryption")
    print("   POST /verify_key - Verify encryption key")
    print("   GET  /room_encryption_info - Get room encryption info")
    print("   GET  /security_status - Get security status")
    
    app.run(
        host='0.0.0.0', 
        port=5000, 
        debug=True,
        ssl_context='adhoc'  # üîê –í–∫–ª—é—á–∞–µ–º HTTPS
    )

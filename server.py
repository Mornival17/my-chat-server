from flask import Flask, request, jsonify
from datetime import datetime
import os
import secrets
import uuid
from flask_cors import CORS

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
# –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ CORS –∑–∞–ø—Ä–æ—Å—ã (—á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—â–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# rooms —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
# –§–æ—Ä–º–∞—Ç: {room_id: {name: str, password: str, created_at: str, users: set, messages: [], next_id: int, media: {}, reactions: {}}}
rooms = {}

# user_rooms —Ö—Ä–∞–Ω–∏—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∫–æ–º–Ω–∞—Ç–∞
# –§–æ—Ä–º–∞—Ç: {username: room_id}
user_rooms = {}

# call_signals —Ö—Ä–∞–Ω–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –§–æ—Ä–º–∞—Ç: {username: [list_of_signals]}
call_signals = {}

def generate_room_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã"""
    return secrets.token_urlsafe(8)

# –ë–∞–∑–æ–≤—ã–µ endpoint'—ã
@app.route('/')
def home():
    return "üöÄ Chat Server Ready! Use /create_room, /join_room, /send and /receive"

@app.route('/health')
def health():
    return "OK"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
@app.route('/create_room', methods=['POST', 'OPTIONS'])
def create_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        room_name = data.get('room_name', 'New Room')
        password = data.get('password', '')
        username = data.get('username', 'Host')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
        room_id = generate_room_id()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å–æ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        rooms[room_id] = {
            'name': room_name,                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            'password': password,                 # –ü–∞—Ä–æ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
            'created_at': datetime.now().isoformat(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            'users': set([username]),             # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'messages': [],                       # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            'next_id': 1,                         # –°–ª–µ–¥—É—é—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            'media': {},                          # –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            'reactions': {}                       # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∞–∫—Ü–∏–π: {message_id: {emoji: [usernames]}}
        }
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–Ω–∞—Ç–æ–π
        user_rooms[username] = room_id
        
        print(f"üéâ Room created: {room_name} (ID: {room_id}) by {username}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            "status": "created", 
            "room_id": room_id,
            "room_name": room_name
        })
        
    except Exception as e:
        print(f"‚ùå Error in /create_room: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
@app.route('/join_room', methods=['POST', 'OPTIONS'])
def join_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_id = data.get('room_id')
        password = data.get('password', '')
        username = data.get('username', 'Anonymous')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ room_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
        
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if room['password'] and room['password'] != password:
            return jsonify({"error": "Invalid password"}), 401
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        room['users'].add(username)
        user_rooms[username] = room_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} joined the room',
            'time': datetime.now().isoformat(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üë§ User {username} joined room {room_id}")
        
        return jsonify({
            "status": "joined",
            "room_name": room['name'],
            "users": list(room['users'])
        })
        
    except Exception as e:
        print(f"‚ùå Error in /join_room: {e}")
        return jsonify({"error": "Server error"}), 500

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/send', methods=['POST', 'OPTIONS'])
def send_message():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        text = data.get('text', '').strip()
        image_data = data.get('image')  # Base64 encoded image
        audio_data = data.get('audio')  # Base64 encoded audio
        message_type = data.get('type', 'text')  # text, image, audio
        reply_to = data.get('reply_to')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        self_destruct = data.get('self_destruct', False)  # –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –î–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        if not text and not image_data and not audio_data:
            return jsonify({"error": "Empty message"}), 400
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –º–µ–¥–∏–∞
        if image_data:
            message_type = 'image'
            if not text:
                text = 'üñºÔ∏è Image'
        elif audio_data:
            message_type = 'audio'
            if not text:
                text = 'üé§ Voice message'
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'id': room['next_id'],
            'user': username,
            'text': text,
            'type': message_type,
            'time': datetime.now().isoformat(),
            'reply_to': reply_to,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ reply
            'self_destruct': self_destruct  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if image_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_id = str(uuid.uuid4())
            message['image_id'] = image_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            room['media'][image_id] = image_data
            print(f"üì∏ Image saved with ID: {image_id}")
        
        if audio_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞—É–¥–∏–æ
            audio_id = str(uuid.uuid4())
            message['audio_id'] = audio_id
            room['media'][audio_id] = audio_data
            print(f"üéµ Audio saved with ID: {audio_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        room['messages'].append(message)
        room['next_id'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(room['messages']) > 100:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            removed_messages = room['messages'][:-100]
            for msg in removed_messages:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    del room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    del room['media'][msg['audio_id']]
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                if msg['id'] in room['reactions']:
                    del room['reactions'][msg['id']]
            room['messages'] = room['messages'][-100:]
        
        print(f"üì® Message in room {room_id}: {username}: {text[:50]}... (type: {message_type}, reply_to: {reply_to})")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "sent", 
            "message_id": message['id']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'image_id' in message:
            response_data['image_id'] = message['image_id']
        if 'audio_id' in message:
            response_data['audio_id'] = message['audio_id']
            
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå Error in /send: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/receive', methods=['GET'])
def receive_messages():
    try:
        username = request.args.get('username')
        since_id = int(request.args.get('since_id', 0))
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å since_id
        new_messages = [
            msg for msg in room['messages'] 
            if msg['id'] > since_id
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        for msg in new_messages:
            if 'image_id' in msg and msg['image_id'] in room['media']:
                msg['image_data'] = room['media'][msg['image_id']]
            if 'audio_id' in msg and msg['audio_id'] in room['media']:
                msg['audio_data'] = room['media'][msg['audio_id']]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            if msg['id'] in room['reactions']:
                msg['reactions'] = room['reactions'][msg['id']]
        
        print(f"üì§ Sending {len(new_messages)} new messages from room {room_id} to {username}")
        
        return jsonify({
            "messages": new_messages,
            "users": list(room['users']),
            "room_name": room['name'],
            "reactions": room['reactions']  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
        })
        
    except Exception as e:
        print(f"‚ùå Error in /receive: {e}")
        return jsonify({"error": "Server error"}), 500

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
@app.route('/add_reaction', methods=['POST', 'OPTIONS'])
def add_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        message_exists = any(msg['id'] == message_id for msg in room['messages'])
        if not message_exists:
            return jsonify({"error": "Message not found"}), 404
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if message_id not in room['reactions']:
            room['reactions'][message_id] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if emoji not in room['reactions'][message_id]:
            room['reactions'][message_id][emoji] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
        if username not in room['reactions'][message_id][emoji]:
            room['reactions'][message_id][emoji].append(username)
            print(f"‚úÖ Reaction added: {username} reacted with {emoji} to message {message_id}")
        else:
            print(f"‚ÑπÔ∏è User {username} already reacted with {emoji} to message {message_id}")
        
        return jsonify({
            "status": "reaction_added",
            "message_id": message_id,
            "emoji": emoji,
            "username": username,
            "reactions": room['reactions'][message_id]
        })
        
    except Exception as e:
        print(f"‚ùå Error in /add_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è
@app.route('/remove_reaction', methods=['POST', 'OPTIONS'])
def remove_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        message_exists = any(msg['id'] == message_id for msg in room['messages'])
        if not message_exists:
            return jsonify({"error": "Message not found"}), 404
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (message_id not in room['reactions'] or 
            emoji not in room['reactions'][message_id] or
            username not in room['reactions'][message_id][emoji]):
            return jsonify({"error": "Reaction not found"}), 404
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–∫—Ü–∏–∏
        room['reactions'][message_id][emoji].remove(username)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if not room['reactions'][message_id][emoji]:
            del room['reactions'][message_id][emoji]
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–∞–∫—Ü–∏–π, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if not room['reactions'][message_id]:
            del room['reactions'][message_id]
        
        print(f"üóëÔ∏è Reaction removed: {username} removed {emoji} from message {message_id}")
        
        return jsonify({
            "status": "reaction_removed",
            "message_id": message_id,
            "emoji": emoji,
            "username": username
        })
        
    except Exception as e:
        print(f"‚ùå Error in /remove_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
@app.route('/get_reactions', methods=['GET'])
def get_reactions():
    try:
        room_id = request.args.get('room_id')
        message_id = int(request.args.get('message_id'))
        
        if not room_id or not message_id:
            return jsonify({"error": "Room ID and Message ID are required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        reactions = room['reactions'].get(message_id, {})
        
        return jsonify({
            "message_id": message_id,
            "reactions": reactions
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_reactions: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
@app.route('/media/<room_id>/<media_id>')
def get_media(room_id, media_id):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        if media_id not in room['media']:
            return jsonify({"error": "Media not found"}), 404
            
        media_data = room['media'][media_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É data URL
        if media_data.startswith('data:image'):
            return jsonify({"data": media_data})
        elif media_data.startswith('data:audio'):
            return jsonify({"data": media_data})
        else:
            return jsonify({"error": "Unknown media type"}), 400
            
    except Exception as e:
        print(f"‚ùå Error in /media: {e}")
        return jsonify({"error": "Server error"}), 500

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ
@app.route('/room_info', methods=['GET'])
def room_info():
    try:
        username = request.args.get('username')
        
        if not username or username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        room = rooms[room_id]
        
        return jsonify({
            "room_id": room_id,
            "room_name": room['name'],
            "users_count": len(room['users']),
            "created_at": room['created_at'],
            "messages_count": len(room['messages'])
        })
        
    except Exception as e:
        print(f"‚ùå Error in /room_info: {e}")
        return jsonify({"error": "Server error"}), 500

# –°–∏—Å—Ç–µ–º–∞ –∑–≤–æ–Ω–∫–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@app.route('/call_signal', methods=['POST', 'OPTIONS'])
def handle_call_signal():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        signal_type = data.get('type')
        target_user = data.get('target_user')
        room_id = data.get('room_id')
        caller = data.get('caller')
        
        print(f"üìû Call signal: {signal_type} from {caller} to {target_user} in room {room_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ
        if (target_user not in user_rooms or 
            user_rooms[target_user] != room_id or
            target_user == caller):
            return jsonify({"error": "Target user not available"}), 404
        
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if target_user not in call_signals:
            call_signals[target_user] = []
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞
        signal_data = {
            'type': signal_type,
            'caller': caller,
            'room_id': room_id,
            'timestamp': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if signal_type == 'call-offer':
            signal_data['offer'] = data.get('offer')
        elif signal_type == 'call-answer':
            signal_data['answer'] = data.get('answer')
        elif signal_type == 'ice-candidate':
            signal_data['candidate'] = data.get('candidate')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        call_signals[target_user].append(signal_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if len(call_signals[target_user]) > 10:
            call_signals[target_user] = call_signals[target_user][-10:]
        
        print(f"‚úÖ Call signal stored for {target_user}. Queue size: {len(call_signals[target_user])}")
        
        return jsonify({
            "status": "signal_delivered",
            "target_user": target_user
        })
        
    except Exception as e:
        print(f"‚ùå Error in /call_signal: {e}")
        return jsonify({"error": "Server error"}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
@app.route('/get_call_signals', methods=['GET'])
def get_call_signals():
    try:
        username = request.args.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_signals = call_signals.get(username, [])
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è (—Å–∏–≥–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        if username in call_signals:
            call_signals[username] = []
        
        print(f"üì° Sending {len(user_signals)} call signals to {username}")
        
        return jsonify({
            "signals": user_signals
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_call_signals: {e}")
        return jsonify({"error": "Server error"}), 500

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
@app.route('/end_call', methods=['POST'])
def handle_end_call():
    try:
        data = request.get_json()
        target_user = data.get('target_user')
        caller = data.get('caller')
        room_id = data.get('room_id')
        
        print(f"üìû Call ended: {caller} to {target_user}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if target_user and target_user in call_signals:
            end_signal = {
                'type': 'call-end',
                'caller': caller,
                'room_id': room_id,
                'timestamp': datetime.now().isoformat()
            }
            call_signals[target_user].append(end_signal)
        
        return jsonify({"status": "call_ended"})
        
    except Exception as e:
        print(f"‚ùå Error in /end_call: {e}")
        return jsonify({"error": "Server error"}), 500

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
@app.route('/cleanup', methods=['POST'])
def cleanup_rooms():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
    try:
        current_time = datetime.now()
        rooms_to_delete = []
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        for room_id, room in rooms.items():
            created_at = datetime.fromisoformat(room['created_at'])
            if (current_time - created_at).total_seconds() > 24 * 60 * 60:
                rooms_to_delete.append(room_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        for room_id in rooms_to_delete:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            users_to_remove = [user for user, rid in user_rooms.items() if rid == room_id]
            for user in users_to_remove:
                del user_rooms[user]
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user in call_signals:
                    del call_signals[user]
            del rooms[room_id]
            print(f"üßπ Deleted old room: {room_id}")
        
        return jsonify({
            "status": "cleaned",
            "deleted_rooms": len(rooms_to_delete),
            "active_rooms": len(rooms)
        })
        
    except Exception as e:
        print(f"‚ùå Error in /cleanup: {e}")
        return jsonify({"error": "Server error"}), 500

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/stats')
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        total_rooms = len(rooms)
        total_users = len(user_rooms)
        total_messages = sum(len(room['messages']) for room in rooms.values())
        total_reactions = sum(len(reactions) for room in rooms.values() for reactions in room['reactions'].values())
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
        active_rooms = {room_id: room for room_id, room in rooms.items() if len(room['users']) > 0}
        
        return jsonify({
            "total_rooms": total_rooms,
            "active_rooms": len(active_rooms),
            "total_users": total_users,
            "total_messages": total_messages,
            "total_reactions": total_reactions,
            "pending_call_signals": sum(len(signals) for signals in call_signals.values()),
            "server_time": datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"‚ùå Error in /stats: {e}")
        return jsonify({"error": "Server error"}), 500

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ Starting Flask server with CORS on port {port}")
    print(f"üìä Available endpoints:")
    print(f"   POST /create_room - Create new room")
    print(f"   POST /join_room - Join existing room") 
    print(f"   POST /send - Send message")
    print(f"   GET  /receive - Receive messages")
    print(f"   POST /add_reaction - Add reaction to message")
    print(f"   POST /remove_reaction - Remove reaction from message")
    print(f"   GET  /get_reactions - Get reactions for message")
    print(f"   GET  /room_info - Get room info")
    print(f"   POST /call_signal - Send call signal")
    print(f"   GET  /get_call_signals - Get pending call signals")
    print(f"   POST /end_call - End call")
    print(f"   GET  /stats - Server statistics")
    print(f"   POST /cleanup - Cleanup old rooms")
    app.run(host='0.0.0.0', port=port, debug=False)
import asyncio
import websockets
import json
import os
from aiohttp import web

# –•—Ä–∞–Ω–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
connected_clients = set()
valid_tokens = {"secret_app_token_12345"}

# HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check
async def handle_http(request):
    return web.Response(text="WebSocket Chat Server is Running! ‚úÖ")

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def websocket_handler(websocket, path):
    try:
        # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_data = await websocket.recv()
        auth = json.loads(auth_data)
        
        if auth.get('token') not in valid_tokens:
            await websocket.close(1008, "Invalid token")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        connected_clients.add(websocket)
        username = auth.get('username', 'Anonymous')
        print(f"‚úÖ {username} connected")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        welcome_msg = json.dumps({
            "type": "system",
            "text": f"{username} joined the chat",
            "users": len(connected_clients)
        })
        await broadcast(welcome_msg, websocket)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        async for message in websocket:
            data = json.loads(message)
            if data.get('type') == 'message':
                chat_msg = json.dumps({
                    "type": "message",
                    "from": username,
                    "text": data.get('text', ''),
                    "timestamp": data.get('timestamp')
                })
                await broadcast(chat_msg, websocket)
                
    except Exception as e:
        print(f"‚ùå WebSocket error: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if websocket in connected_clients:
            connected_clients.remove(websocket)
            print(f"üì§ User disconnected")

async def broadcast(message, sender=None):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    disconnected = set()
    for client in connected_clients:
        if client != sender:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            try:
                await client.send(message)
            except:
                disconnected.add(client)
    connected_clients.difference_update(disconnected)

async def start_websocket_server():
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ Starting WebSocket server on port {port}...")
    return await websockets.serve(websocket_handler, "0.0.0.0", port)

async def start_http_server():
    app = web.Application()
    app.router.add_get('/', handle_http)
    app.router.add_get('/health', handle_http)
    
    port = int(os.environ.get('PORT', 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"üåê HTTP server running on port {port}")
    return runner

async def main():
    print("üîÑ Starting servers...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞
    http_runner = await start_http_server()
    websocket_server = await start_websocket_server()
    
    print("‚úÖ All servers are running!")
    print("üì° WebSocket URL: wss://your-app.onrender.com")
    print("üåê HTTP URL: https://your-app.onrender.com")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    await asyncio.Future()

if __name__ == "__main__":
    asyncio.run(main())

from flask import Flask, request, jsonify
from datetime import datetime
import os
import secrets
import uuid
from flask_cors import CORS

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
# –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ CORS –∑–∞–ø—Ä–æ—Å—ã (—á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—â–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# rooms —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
# –§–æ—Ä–º–∞—Ç: {room_id: {name: str, password: str, created_at: str, users: set, messages: [], next_id: int, media: {}, reactions: {}}}
rooms = {}

# user_rooms —Ö—Ä–∞–Ω–∏—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∫–æ–º–Ω–∞—Ç–∞
# –§–æ—Ä–º–∞—Ç: {username: room_id}
user_rooms = {}

# call_signals —Ö—Ä–∞–Ω–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –§–æ—Ä–º–∞—Ç: {username: [list_of_signals]}
call_signals = {}

# üîê –ù–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
room_keys = {}  # {room_id: public_key} - –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–º–Ω–∞—Ç
encrypted_rooms = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
key_verification_attempts = {}  # {room_id: {username: attempts}} - –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞

def generate_room_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã"""
    return secrets.token_urlsafe(8)

# –ë–∞–∑–æ–≤—ã–µ endpoint'—ã
@app.route('/')
def home():
    return "üöÄ Secure Chat Server Ready! Use /create_room, /join_room, /send and /receive"

@app.route('/health')
def health():
    return "OK"

# üîê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)
@app.route('/create_room', methods=['POST', 'OPTIONS'])
def create_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        room_name = data.get('room_name', 'New Room')
        password = data.get('password', '')
        username = data.get('username', 'Host')
        
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        is_encrypted = data.get('is_encrypted', False)
        public_key = data.get('public_key', '')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
        room_id = generate_room_id()
        
        # üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if is_encrypted and not public_key:
            return jsonify({"error": "Public key required for encrypted room"}), 400
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å–æ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        rooms[room_id] = {
            'name': room_name,                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            'password': password,                 # –ü–∞—Ä–æ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
            'created_at': datetime.now().isoformat(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            'users': set([username]),             # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'messages': [],                       # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            'next_id': 1,                         # –°–ª–µ–¥—É—é—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            'media': {},                          # –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            'reactions': {},                      # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∞–∫—Ü–∏–π: {message_id: {emoji: [usernames]}}
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted,         # –§–ª–∞–≥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
            'public_key': public_key,             # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã
            'encryption_enabled_at': datetime.now().isoformat() if is_encrypted else None
        }
        
        # üîê –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞
        if is_encrypted:
            room_keys[room_id] = public_key
            encrypted_rooms.add(room_id)
            print(f"üîê Encryption enabled for room {room_id}")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–Ω–∞—Ç–æ–π
        user_rooms[username] = room_id
        
        print(f"üéâ Room created: {room_name} (ID: {room_id}) by {username}")
        print(f"üîê Encryption: {is_encrypted}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            "status": "created", 
            "room_id": room_id,
            "room_name": room_name,
            "is_encrypted": is_encrypted,  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "security_level": "high" if is_encrypted else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /create_room: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–µ–π)
@app.route('/join_room', methods=['POST', 'OPTIONS'])
def join_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_id = data.get('room_id')
        password = data.get('password', '')
        username = data.get('username', 'Anonymous')
        
        # üîê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        key_verification_data = data.get('key_verification')
        public_key = data.get('public_key')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ room_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
        
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if room['password'] and room['password'] != password:
            return jsonify({"error": "Invalid password"}), 401
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        if room['is_encrypted']:
            if not key_verification_data or not public_key:
                return jsonify({
                    "error": "Key verification required for encrypted room",
                    "is_encrypted": True,
                    "key_required": True
                }), 401
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            attempt_key = f"{room_id}:{username}"
            current_attempts = key_verification_attempts.get(attempt_key, 0)
            if current_attempts >= 3:
                return jsonify({
                    "error": "Too many key verification attempts. Please wait 5 minutes.",
                    "is_encrypted": True,
                    "blocked": True
                }), 429
            
            # üîê –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ —Å–ª–æ–∂–Ω–µ–µ)
            if not verify_encryption_key(room_id, public_key, key_verification_data):
                key_verification_attempts[attempt_key] = current_attempts + 1
                return jsonify({
                    "error": "Invalid encryption key",
                    "is_encrypted": True,
                    "attempts_remaining": 3 - (current_attempts + 1)
                }), 401
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            key_verification_attempts.pop(attempt_key, None)
            print(f"üîê Key verified for user {username} in room {room_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        room['users'].add(username)
        user_rooms[username] = room_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} joined the room',
            'time': datetime.now().isoformat(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üë§ User {username} joined room {room_id}")
        print(f"üîê Room encryption: {room['is_encrypted']}")
        
        return jsonify({
            "status": "joined",
            "room_name": room['name'],
            "users": list(room['users']),
            "is_encrypted": room['is_encrypted'],  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "public_key": room.get('public_key'),  # üîê –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "security_level": "high" if room['is_encrypted'] else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /join_room: {e}")
        return jsonify({"error": "Server error"}), 500

def verify_encryption_key(room_id, user_public_key, verification_data):
    """üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, challenge-response protocol
        
        # –î–ª—è –¥–µ–º–æ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not user_public_key or len(user_public_key) < 100:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in room_keys:
            return False
            
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        
        print(f"üîê Key verification for room {room_id}: SUCCESS")
        return True
        
    except Exception as e:
        print(f"‚ùå Key verification error: {e}")
        return False

# üîê –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö)
@app.route('/send', methods=['POST', 'OPTIONS'])
def send_message():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        text = data.get('text', '').strip()
        image_data = data.get('image')  # Base64 encoded image
        audio_data = data.get('audio')  # Base64 encoded audio
        message_type = data.get('type', 'text')  # text, image, audio
        reply_to = data.get('reply_to')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        self_destruct = data.get('self_destruct', False)  # –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        encrypted_data = data.get('encrypted_data')
        encryption_metadata = data.get('encryption_metadata')
        is_encrypted_payload = data.get('is_encrypted', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room['is_encrypted'] and not is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload required for encrypted room",
                "is_encrypted": True
            }), 400
        
        if not room['is_encrypted'] and is_encrypted_payload:
            return jsonify({
                "error": "Encrypted payload not allowed in standard room",
                "is_encrypted": False
            }), 400
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–¥–∏–∞ –±–µ–∑ encrypted_data
        if room['is_encrypted']:
            # –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –º–µ–¥–∏–∞
            if not encrypted_data and not image_data and not audio_data and not text:
                return jsonify({"error": "Empty message"}), 400
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not text and not image_data and not audio_data:
                return jsonify({"error": "Empty message"}), 400
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –º–µ–¥–∏–∞
        if image_data:
            message_type = 'image'
            if not text:
                text = 'üñºÔ∏è Image'
        elif audio_data:
            message_type = 'audio'
            if not text:
                text = 'üé§ Voice message'
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'id': room['next_id'],
            'user': username,
            'text': text,
            'type': message_type,
            'time': datetime.now().isoformat(),
            'reply_to': reply_to,
            'self_destruct': self_destruct,
            # üîê –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            'is_encrypted': is_encrypted_payload,
            'encrypted_data': encrypted_data,
            'encryption_metadata': encryption_metadata
        }
        
        # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –∫–æ–º–Ω–∞—Ç (–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –∏ –æ–±—ã—á–Ω—ã—Ö)
        if image_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_id = str(uuid.uuid4())
            message['image_id'] = image_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            room['media'][image_id] = image_data
            print(f"üì∏ Image saved with ID: {image_id}")
        
        if audio_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞—É–¥–∏–æ
            audio_id = str(uuid.uuid4())
            message['audio_id'] = audio_id
            room['media'][audio_id] = audio_data
            print(f"üéµ Audio saved with ID: {audio_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        room['messages'].append(message)
        room['next_id'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(room['messages']) > 100:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            removed_messages = room['messages'][:-100]
            for msg in removed_messages:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    del room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    del room['media'][msg['audio_id']]
                # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                if msg['id'] in room['reactions']:
                    del room['reactions'][msg['id']]
            room['messages'] = room['messages'][-100:]
        
        print(f"üì® Message in room {room_id}: {username}: {text[:50]}... (type: {message_type}, reply_to: {reply_to})")
        print(f"üîê Encrypted: {is_encrypted_payload}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "sent", 
            "message_id": message['id'],
            "is_encrypted": is_encrypted_payload  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'image_id' in message:
            response_data['image_id'] = message['image_id']
        if 'audio_id' in message:
            response_data['audio_id'] = message['audio_id']
            
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå Error in /send: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@app.route('/receive', methods=['GET'])
def receive_messages():
    try:
        username = request.args.get('username')
        since_id = int(request.args.get('since_id', 0))
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å since_id
        new_messages = [
            msg for msg in room['messages'] 
            if msg['id'] > since_id
        ]
        
        # üîê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room['is_encrypted']:
            # –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
            # –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–∞–º –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å
            for msg in new_messages:
                # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                if msg['type'] != 'system' and msg.get('is_encrypted'):
                    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    msg['text'] = 'üîí Encrypted message'
                # üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
        else:
            # –î–ª—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            for msg in new_messages:
                if 'image_id' in msg and msg['image_id'] in room['media']:
                    msg['image_data'] = room['media'][msg['image_id']]
                if 'audio_id' in msg and msg['audio_id'] in room['media']:
                    msg['audio_data'] = room['media'][msg['audio_id']]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                if msg['id'] in room['reactions']:
                    msg['reactions'] = room['reactions'][msg['id']]
        
        print(f"üì§ Sending {len(new_messages)} new messages from room {room_id} to {username}")
        print(f"üîê Room encrypted: {room['is_encrypted']}")
        
        return jsonify({
            "messages": new_messages,
            "users": list(room['users']),
            "room_name": room['name'],
            "reactions": room['reactions'],  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
            "is_encrypted": room['is_encrypted'],  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "public_key": room.get('public_key')  # üîê –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        })
        
    except Exception as e:
        print(f"‚ùå Error in /receive: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ù–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
@app.route('/verify_key', methods=['POST', 'OPTIONS'])
def verify_key():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        room_id = data.get('room_id')
        username = data.get('username')
        public_key = data.get('public_key')
        challenge_response = data.get('challenge_response')
        
        if not all([room_id, username, public_key]):
            return jsonify({"error": "Room ID, username and public key required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        if not room['is_encrypted']:
            return jsonify({"error": "Room is not encrypted"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt_key = f"{room_id}:{username}"
        current_attempts = key_verification_attempts.get(attempt_key, 0)
        if current_attempts >= 5:
            return jsonify({
                "error": "Too many verification attempts. Please wait 10 minutes.",
                "blocked": True
            }), 429
        
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        is_valid = verify_encryption_key(room_id, public_key, challenge_response)
        
        if is_valid:
            key_verification_attempts.pop(attempt_key, None)
            return jsonify({
                "status": "key_verified",
                "room_id": room_id,
                "room_name": room['name'],
                "is_encrypted": True,
                "public_key": room.get('public_key')
            })
        else:
            key_verification_attempts[attempt_key] = current_attempts + 1
            return jsonify({
                "error": "Key verification failed",
                "attempts_remaining": 5 - (current_attempts + 1)
            }), 401
        
    except Exception as e:
        print(f"‚ùå Error in /verify_key: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ù–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
@app.route('/room_encryption_info', methods=['GET'])
def room_encryption_info():
    try:
        room_id = request.args.get('room_id')
        
        if not room_id:
            return jsonify({"error": "Room ID is required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        return jsonify({
            "room_id": room_id,
            "room_name": room['name'],
            "is_encrypted": room['is_encrypted'],
            "has_public_key": bool(room.get('public_key')),
            "users_count": len(room['users']),
            "created_at": room['created_at'],
            "encryption_enabled_at": room.get('encryption_enabled_at'),
            "security_level": "high" if room['is_encrypted'] else "standard"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /room_encryption_info: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ
@app.route('/room_info', methods=['GET'])
def room_info():
    try:
        username = request.args.get('username')
        
        if not username or username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        room = rooms[room_id]
        
        return jsonify({
            "room_id": room_id,
            "room_name": room['name'],
            "users_count": len(room['users']),
            "created_at": room['created_at'],
            "messages_count": len(room['messages']),
            "is_encrypted": room['is_encrypted'],  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "security_level": "üîí Encrypted" if room['is_encrypted'] else "üîì Standard",  # üîê –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "security_description": "End-to-end encrypted" if room['is_encrypted'] else "Standard security"
        })
        
    except Exception as e:
        print(f"‚ùå Error in /room_info: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/stats')
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        total_rooms = len(rooms)
        encrypted_rooms_count = len([r for r in rooms.values() if r['is_encrypted']])
        total_users = len(user_rooms)
        total_messages = sum(len(room['messages']) for room in rooms.values())
        total_reactions = sum(len(reactions) for room in rooms.values() for reactions in room['reactions'].values())
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
        active_rooms = {room_id: room for room_id, room in rooms.items() if len(room['users']) > 0}
        active_encrypted_rooms = len([r for r in active_rooms.values() if r['is_encrypted']])
        
        # üîê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é
        encrypted_messages = sum(
            len([m for m in room['messages'] if m.get('is_encrypted')]) 
            for room in rooms.values() 
            if room['is_encrypted']
        )
        
        return jsonify({
            "total_rooms": total_rooms,
            "encrypted_rooms": encrypted_rooms_count,
            "standard_rooms": total_rooms - encrypted_rooms_count,
            "active_rooms": len(active_rooms),
            "active_encrypted_rooms": active_encrypted_rooms,
            "total_users": total_users,
            "total_messages": total_messages,
            "encrypted_messages": encrypted_messages,
            "total_reactions": total_reactions,
            "pending_call_signals": sum(len(signals) for signals in call_signals.values()),
            "server_time": datetime.now().isoformat(),
            "security_summary": {
                "encrypted_percentage": round((encrypted_rooms_count / total_rooms * 100) if total_rooms > 0 else 0, 1),
                "encrypted_messages_percentage": round((encrypted_messages / total_messages * 100) if total_messages > 0 else 0, 1),
                "recommendation": "üîí Enable encryption for sensitive conversations"
            }
        })
        
    except Exception as e:
        print(f"‚ùå Error in /stats: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
@app.route('/cleanup', methods=['POST'])
def cleanup_rooms():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
    try:
        current_time = datetime.now()
        rooms_to_delete = []
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        for room_id, room in rooms.items():
            created_at = datetime.fromisoformat(room['created_at'])
            if (current_time - created_at).total_seconds() > 24 * 60 * 60:
                rooms_to_delete.append(room_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        for room_id in rooms_to_delete:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            users_to_remove = [user for user, rid in user_rooms.items() if rid == room_id]
            for user in users_to_remove:
                del user_rooms[user]
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user in call_signals:
                    del call_signals[user]
                # üîê –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
                for key in list(key_verification_attempts.keys()):
                    if key.startswith(f"{room_id}:"):
                        del key_verification_attempts[key]
            
            # üîê –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π
            if room_id in room_keys:
                del room_keys[room_id]
            if room_id in encrypted_rooms:
                encrypted_rooms.remove(room_id)
                
            del rooms[room_id]
            print(f"üßπ Deleted old room: {room_id}")
        
        return jsonify({
            "status": "cleaned",
            "deleted_rooms": len(rooms_to_delete),
            "active_rooms": len(rooms),
            "remaining_encrypted_rooms": len(encrypted_rooms),
            "cleaned_verification_attempts": len(rooms_to_delete)
        })
        
    except Exception as e:
        print(f"‚ùå Error in /cleanup: {e}")
        return jsonify({"error": "Server error"}), 500

# üîê –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
@app.route('/add_reaction', methods=['POST', 'OPTIONS'])
def add_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        print(f"üîÑ Adding reaction: message_id={message_id}, username={username}, emoji={emoji}, room_id={room_id}")
        
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = None
        for msg in room['messages']:
            if msg['id'] == message_id:
                message = msg
                break
        
        if not message:
            return jsonify({"error": "Message not found"}), 404
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if message_id not in room['reactions']:
            room['reactions'][message_id] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if emoji not in room['reactions'][message_id]:
            room['reactions'][message_id][emoji] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
        if username not in room['reactions'][message_id][emoji]:
            room['reactions'][message_id][emoji].append(username)
            print(f"‚úÖ Reaction added: {emoji} by {username} to message {message_id}")
        else:
            print(f"‚ÑπÔ∏è Reaction already exists: {emoji} by {username} to message {message_id}")
        
        return jsonify({
            "status": "reaction_added",
            "message_id": message_id,
            "emoji": emoji,
            "username": username,
            "reactions": room['reactions'][message_id]
        })
        
    except Exception as e:
        print(f"‚ùå Error in /add_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/remove_reaction', methods=['POST', 'OPTIONS'])
def remove_reaction():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        message_id = data.get('message_id')
        username = data.get('username')
        emoji = data.get('emoji')
        room_id = data.get('room_id')
        
        print(f"üîÑ Removing reaction: message_id={message_id}, username={username}, emoji={emoji}, room_id={room_id}")
        
        if not all([message_id, username, emoji, room_id]):
            return jsonify({"error": "Missing required fields"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        if username not in room['users']:
            return jsonify({"error": "User not in room"}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (message_id not in room['reactions'] or 
            emoji not in room['reactions'][message_id] or 
            username not in room['reactions'][message_id][emoji]):
            return jsonify({"error": "Reaction not found"}), 404
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–∫—Ü–∏–∏
        room['reactions'][message_id][emoji].remove(username)
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–æ–π —Ä–µ–∞–∫—Ü–∏–µ–π, —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if not room['reactions'][message_id][emoji]:
            del room['reactions'][message_id][emoji]
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if not room['reactions'][message_id]:
            del room['reactions'][message_id]
        
        print(f"‚úÖ Reaction removed: {emoji} by {username} from message {message_id}")
        
        return jsonify({
            "status": "reaction_removed",
            "message_id": message_id,
            "emoji": emoji,
            "username": username
        })
        
    except Exception as e:
        print(f"‚ùå Error in /remove_reaction: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/get_reactions', methods=['GET'])
def get_reactions():
    try:
        message_id = int(request.args.get('message_id'))
        room_id = request.args.get('room_id')
        
        if not message_id or not room_id:
            return jsonify({"error": "Message ID and Room ID are required"}), 400
            
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        reactions = room['reactions'].get(message_id, {})
        
        return jsonify({
            "message_id": message_id,
            "reactions": reactions
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_reactions: {e}")
        return jsonify({"error": "Server error"}), 500

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoint'—ã –¥–ª—è –º–µ–¥–∏–∞ –∏ –∑–≤–æ–Ω–∫–æ–≤
@app.route('/media/<media_id>', methods=['GET'])
def get_media(media_id):
    try:
        # –ò—â–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
        for room in rooms.values():
            if media_id in room['media']:
                return jsonify({
                    "media_id": media_id,
                    "data": room['media'][media_id]
                })
        
        return jsonify({"error": "Media not found"}), 404
        
    except Exception as e:
        print(f"‚ùå Error in /media: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/call_signal', methods=['POST', 'OPTIONS'])
def call_signal():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        from_user = data.get('from_user')
        to_user = data.get('to_user')
        signal_type = data.get('type')  # 'offer', 'answer', 'ice-candidate'
        signal_data = data.get('data')
        
        if not all([from_user, to_user, signal_type, signal_data]):
            return jsonify({"error": "Missing required fields"}), 400
        
        if to_user not in call_signals:
            call_signals[to_user] = []
        
        call_signals[to_user].append({
            'from_user': from_user,
            'type': signal_type,
            'data': signal_data,
            'timestamp': datetime.now().isoformat()
        })
        
        print(f"üìû Call signal from {from_user} to {to_user}: {signal_type}")
        
        return jsonify({"status": "signal_sent"})
        
    except Exception as e:
        print(f"‚ùå Error in /call_signal: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/get_call_signals', methods=['GET'])
def get_call_signals():
    try:
        username = request.args.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
        
        signals = call_signals.get(username, [])
        call_signals[username] = []  # Clear signals after reading
        
        return jsonify({
            "signals": signals
        })
        
    except Exception as e:
        print(f"‚ùå Error in /get_call_signals: {e}")
        return jsonify({"error": "Server error"}), 500

@app.route('/leave_room', methods=['POST', 'OPTIONS'])
def leave_room():
    if request.method == 'OPTIONS':
        return '', 200
        
    try:
        data = request.get_json()
        username = data.get('username')
        
        if not username:
            return jsonify({"error": "Username is required"}), 400
            
        if username not in user_rooms:
            return jsonify({"error": "User not in any room"}), 400
        
        room_id = user_rooms[username]
        
        if room_id not in rooms:
            return jsonify({"error": "Room not found"}), 404
            
        room = rooms[room_id]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room['users'].discard(username)
        del user_rooms[username]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
        system_message = {
            'id': room['next_id'],
            'user': 'System',
            'text': f'{username} left the room',
            'time': datetime.now().isoformat(),
            'type': 'system'
        }
        room['messages'].append(system_message)
        room['next_id'] += 1
        
        print(f"üëã User {username} left room {room_id}")
        
        return jsonify({"status": "left"})
        
    except Exception as e:
        print(f"‚ùå Error in /leave_room: {e}")
        return jsonify({"error": "Server error"}), 500

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    print("üöÄ Starting Secure Chat Server...")
    print("üì° Endpoints available:")
    print("   POST /create_room - Create a new chat room")
    print("   POST /join_room - Join an existing room") 
    print("   POST /send - Send a message")
    print("   GET  /receive - Receive new messages")
    print("   POST /add_reaction - Add reaction to message")
    print("   POST /remove_reaction - Remove reaction from message")
    print("   GET  /get_reactions - Get reactions for message")
    print("   POST /call_signal - Send WebRTC signal")
    print("   GET  /get_call_signals - Get pending WebRTC signals")
    print("   POST /leave_room - Leave current room")
    print("   GET  /stats - Get server statistics")
    print("   POST /cleanup - Cleanup old rooms")
    print("üîê Encryption features enabled")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
# security/advanced_bruteforce.py
import time
import random
from config import Config

class AdvancedBruteForceProtection:
    def __init__(self):
        self.bruteforce_attempts = {}
        self.suspicious_ips = {}
        self.MAX_ATTEMPTS_PER_HOUR = 5
        self.BLOCK_TIME = 3600  # 1 —á–∞—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.SUSPICIOUS_THRESHOLD = 3
        self.cleanup_counter = 0
    
    def check_bruteforce(self, ip, room_id=None, username=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–Ω–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        current_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if room_id and username:
            key = f"{ip}:{room_id}:{username}"
        elif room_id:
            key = f"{ip}:{room_id}"
        else:
            key = ip
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        if key in self.bruteforce_attempts:
            self.bruteforce_attempts[key] = [
                t for t in self.bruteforce_attempts[key] 
                if current_time - t < self.BLOCK_TIME
            ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if key in self.bruteforce_attempts and len(self.bruteforce_attempts[key]) >= self.MAX_ATTEMPTS_PER_HOUR:
            # –ü–æ–º–µ—á–∞–µ–º IP –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            if ip not in self.suspicious_ips:
                self.suspicious_ips[ip] = 0
            self.suspicious_ips[ip] += 1
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        if key not in self.bruteforce_attempts:
            self.bruteforce_attempts[key] = []
        self.bruteforce_attempts[key].append(current_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP
        if ip in self.suspicious_ips and self.suspicious_ips[ip] >= self.SUSPICIOUS_THRESHOLD:
            time.sleep(0.5)  # 500ms –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.cleanup_counter += 1
        if self.cleanup_counter >= 100:
            self.cleanup_old_attempts()
            self.cleanup_counter = 0
        
        return True
    
    def cleanup_old_attempts(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ø—ã—Ç–∫–∞—Ö"""
        current_time = time.time()
        keys_to_remove = []
        ips_to_remove = []
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
        for key, attempts in self.bruteforce_attempts.items():
            if not attempts or (current_time - max(attempts) > self.BLOCK_TIME * 2):
                keys_to_remove.append(key)
        
        # –û—á–∏—â–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP
        for ip, count in self.suspicious_ips.items():
            if count == 0:
                ips_to_remove.append(ip)
        
        for key in keys_to_remove:
            del self.bruteforce_attempts[key]
        
        for ip in ips_to_remove:
            del self.suspicious_ips[ip]
        
        print(f"üßπ Cleaned {len(keys_to_remove)} brute-force records and {len(ips_to_remove)} suspicious IPs")
    
    def get_attempts_info(self, ip, room_id=None, username=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö"""
        if room_id and username:
            key = f"{ip}:{room_id}:{username}"
        elif room_id:
            key = f"{ip}:{room_id}"
        else:
            key = ip
            
        if key in self.bruteforce_attempts:
            attempts = self.bruteforce_attempts[key]
            return {
                'attempts_count': len(attempts),
                'last_attempt': max(attempts) if attempts else None,
                'blocked': len(attempts) >= self.MAX_ATTEMPTS_PER_HOUR,
                'suspicious_level': self.suspicious_ips.get(ip, 0)
            }
        return {
            'attempts_count': 0, 
            'blocked': False,
            'suspicious_level': self.suspicious_ips.get(ip, 0)
        }
    
    def report_successful_auth(self, ip, room_id=None, username=None):
        """–û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        if room_id and username:
            key = f"{ip}:{room_id}:{username}"
        elif room_id:
            key = f"{ip}:{room_id}"
        else:
            key = ip
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
        if key in self.bruteforce_attempts:
            del self.bruteforce_attempts[key]
        
        # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if ip in self.suspicious_ips and self.suspicious_ips[ip] > 0:
            self.suspicious_ips[ip] -= 1
    
    def get_security_report(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        total_attempts = sum(len(attempts) for attempts in self.bruteforce_attempts.values())
        blocked_ips = len([attempts for attempts in self.bruteforce_attempts.values() 
                          if len(attempts) >= self.MAX_ATTEMPTS_PER_HOUR])
        
        return {
            'total_tracked_entities': len(self.bruteforce_attempts),
            'total_attempts': total_attempts,
            'blocked_entities': blocked_ips,
            'suspicious_ips': len([ip for ip, count in self.suspicious_ips.items() if count > 0]),
            'protection_level': 'high'
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞—â–∏—Ç—ã
advanced_bruteforce_protection = AdvancedBruteForceProtection()
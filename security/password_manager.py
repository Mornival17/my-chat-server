# security/password_manager.py
import hashlib
import secrets
import time
import random
from datetime import datetime

class PasswordManager:
    def __init__(self):
        self.password_storage = {}
        self.cleanup_counter = 0
    
    def create_password_hash(self, password, salt=None):
        """–•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PBKDF2"""
        salt = salt or secrets.token_bytes(32)
        hash_obj = hashlib.pbkdf2_hmac(
            'sha256', 
            password.encode('utf-8'), 
            salt, 
            100000,  # 100,000 –∏—Ç–µ—Ä–∞—Ü–∏–π
            dklen=64  # –î–ª–∏–Ω–∞ –∫–ª—é—á–∞ 64 –±–∞–π—Ç–∞
        )
        return {
            'salt': salt.hex(),
            'hash': hash_obj.hex(),
            'created_at': time.time(),
            'attempts': 0,
            'last_attempt': None
        }
    
    def verify_password(self, password, stored_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timing attacks"""
        try:
            salt = bytes.fromhex(stored_data['salt'])
            test_hash = hashlib.pbkdf2_hmac(
                'sha256', 
                password.encode('utf-8'), 
                salt, 
                100000,
                dklen=64
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º compare_digest –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç timing attacks
            return secrets.compare_digest(test_hash.hex(), stored_data['hash'])
        except (KeyError, ValueError, TypeError):
            return False
    
    def store_room_password(self, room_id, password):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
        if password and len(password) > 0:
            self.password_storage[room_id] = self.create_password_hash(password)
            print(f"üîê Password stored for room {room_id}")
        elif room_id in self.password_storage:
            del self.password_storage[room_id]
            print(f"üîì Password removed for room {room_id}")
    
    def verify_room_password(self, room_id, password):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç
        if room_id not in self.password_storage:
            return True
        
        stored_data = self.password_storage[room_id]
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if stored_data['attempts'] >= 10:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if stored_data['last_attempt'] and (current_time - stored_data['last_attempt'] > 900):
                stored_data['attempts'] = 0
                stored_data['last_attempt'] = None
            else:
                print(f"üö´ Too many password attempts for room {room_id}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        is_valid = self.verify_password(password, stored_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        stored_data['attempts'] += 1
        stored_data['last_attempt'] = current_time
        
        if is_valid:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            stored_data['attempts'] = 0
            stored_data['last_attempt'] = None
            print(f"‚úÖ Password verified for room {room_id}")
        else:
            print(f"‚ùå Password failed for room {room_id} (attempt {stored_data['attempts']})")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        self.cleanup_counter += 1
        if self.cleanup_counter >= 50:
            self.cleanup_old_passwords()
            self.cleanup_counter = 0
        
        return is_valid
    
    def get_password_strength(self, password):
        """–û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if len(password) < 6:
            return "very_weak"
        
        score = 0
        if len(password) >= 8:
            score += 1
        if any(c.islower() for c in password):
            score += 1
        if any(c.isupper() for c in password):
            score += 1
        if any(c.isdigit() for c in password):
            score += 1
        if any(not c.isalnum() for c in password):
            score += 1
        
        strength_levels = ["very_weak", "weak", "medium", "strong", "very_strong"]
        return strength_levels[min(score, 4)]
    
    def cleanup_old_passwords(self, max_age_hours=24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
        current_time = time.time()
        rooms_to_remove = []
        
        for room_id, data in self.password_storage.items():
            if current_time - data['created_at'] > max_age_hours * 3600:
                rooms_to_remove.append(room_id)
        
        for room_id in rooms_to_remove:
            del self.password_storage[room_id]
        
        if rooms_to_remove:
            print(f"üßπ Cleaned up {len(rooms_to_remove)} old passwords")
        
        return len(rooms_to_remove)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π
password_manager = PasswordManager()